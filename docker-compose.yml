version: "3.9"

x-common: &common
  restart: always
  env_file:
    - .env  # Общий файл с переменными окружения

services:
  postgres:
    <<: *common  # Включаем общие настройки для этого сервиса
    image: postgres:16.2
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}       # Имя пользователя из .env файла
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # Пароль из .env файла
      POSTGRES_DB: ${POSTGRES_DB}           # Имя базы данных из .env файла
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      retries: 5
      start_period: 5s
#    volumes:
#      - pgdata:/var/lib/postgresql/data # Сохранение данных на хосте
    expose:
      - 5432
    networks:
      - compose_net

  pgadmin:
    <<: *common  # Включаем общие настройки для этого сервиса
    image: dpage/pgadmin4:8.11
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL} # Email для входа в pgAdmin из .env файла
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD} # Пароль для входа в pgAdmin из .env файла
      PGADMIN_DEFAULT_SERVER: ${PGADMIN_DEFAULT_SERVER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5050:80" # Открываем порт 5050 для доступа к pgAdmin через браузер
    depends_on:
      - postgres
    networks:
      - compose_net

  telegram_bot:
    build:
      context: . # Путь к директории с Dockerfile
      dockerfile: Dockerfile # Имя Dockerfile
      args:
        GITHUB_TOKEN: ${GITHUB_TOKEN}
      no_cache: true
    container_name: telegram_bot
    depends_on:
      - postgres
      - pgadmin
    networks:
      - compose_net

#volumes:
#  pgdata:
#    driver: local # Локальное сохранение данных

networks:
  compose_net:
    driver: bridge
